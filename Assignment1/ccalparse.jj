/***********************
**SECTION 1 -- OPTIONS**
***********************/
options {
  IGNORE_CASE = true;
  JAVA_UNICODE_ESCAPE = true;
}

/***********************
*SECTION 2 -- USR CODE**
***********************/

PARSER_BEGIN(ccalparser1)

public class Assignment1Parser {

  public static void main(String[] args) {

    Assignment1Parser parse;

    /******* init parser *******/

    if (args.length == 0){
      System.out.println("No file specified, reading from std in...");
      parse = new Assignment1Parser(System.in);
    }
    else if (args.length == 1) {
      try {
        parse = new Assignment1Parser(new java.io.FileInputStream(args[0]));
      }
      catch (java.io.FileNotFoundException err) {
        System.err.println("File " + args[0] + " not found!");
        System.err.println("SYSTEM ERROR MSG: " + err);
        return;
      }
    }
    else {
      System.out.println("Please try again using CCAL parser like:");
      System.out.println("  java ccalparse < inputfile.ccl");
      System.out.println("or like");
      System.out.println("  java ccalparse  inputfile.ccl");
      return;
    }

    /******* init is finished *******/


    /******* try parsing the file *******/
    try {
      System.out.println("Parsing file...");
      parse.program();
      System.out.println("Successfully parsed!");
    } catch (FileNotParsedException err) {
      System.out.println("Error during parsing!");
      System.out.println("SYSTEM ERROR MSG :" + err.getMessage());
    }
  }
}

PARSER_END(ccalparser1)


/*********************************
**SECTION 3 -- TOKEN DEFINITIONS**
*********************************/

TOKEN_MGR_DECLS :
{
  static int commentNestLvl = 0;
}

/******* skip whitespace, tabs & newlines *******/
SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
}

/******* skip single line comments or change to skipping multi-line comments *******/
SKIP :
{
  < "//" ([" "-"~"])* "\n" >
  | "/*" { commentNestLvl++; } : IN_COMMENT
}

/******* multi-line comment skipping *******/
<IN_COMMENT> SKIP :
{
  "/*" { commentNestLvl++;}
  | "/*" {commentNestLvl--; if commentNestLvl==0 SwitchTo(DEFAULT);}
}

/******* RESERVED WORDS *******/
TOKEN :
{
  < VAR : "var" >
  | < CONST : "const" >
  | < RETURN : "return" >
  | < INTEGER : "integer" >
  | < BOOLEAN : "boolean" >
  | < VOID : "void" >
  | < MAIN : "main" >
  | < IF : "if" >
  | < ELSE : "else" >
  | < TRUE : "true" >
  | < FASLE : "false" >
  | < WHILE : "while" >
  | < SKIPPY : "skip" >
}

/******** PUNCTUATION *******/
TOKEN :
{
  < COMMA : "," >
  | < SEMIC : ";" >
  | < COLON : ":" >
}

/******** BRACKETS *******/
TOKEN :
{
  < CURLY_O : "{" >
  | < CURLY_C : "}" >
  | < ROUNDED_O : "(" >
  | < ROUNDED_C : ")" >
}

/******* LOGICAL & MATHEMATICAL OPER8TORS *******/
TOKEN :
{
  < ASSIGN : "=" >
  | < PLUS : "+" >
  | < MINUS : "-" >
  | < NEGATE : "~" >
  | < OR : "||" >
  | < AND : "&&" >
  | < EQUAL : "==" >
  | < NOT_EQUAL : "!=" >
  | < LESS_THAN : "<" >
  | < LESS_THAN_EQUAL : "<=" >
  | < GREATER_THAN : ">" >
  | < GREATER_THAN_EQUAL : ">=" >

}
