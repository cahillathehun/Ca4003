/***********************
**SECTION 1 -- OPTIONS**
***********************/
options
{
  /******* INGORE_CASE is the only option needed *******/
  IGNORE_CASE = true;
  JAVA_UNICODE_ESCAPE = true;
  NODE_DEFAULT_VOID = true;
  MULTI=true;
  VISITOR = true;
}

/***********************
*SECTION 2 -- USR CODE**
***********************/

PARSER_BEGIN(ccalparse)

import java.io.*;
import java.util.*;

public class ccalparse {

  public static STC ST = new STC();

  public static void main(String[] args)throws ParseException, FileNotFoundException {
    String tmp;
    STC tmp2;

    ccalparse parse;

    System.out.println("------------------------------------\n");
    System.out.println("Parsing file...\n");

    parse = new ccalparse(new java.io.FileInputStream(args[0]));
    System.out.println("Successfully parsed!");

    SimpleNode root = parse.program();

    System.out.println("\\_________AST_________/\n");
    root.dump("");
    System.out.println("");
    System.out.println("\\_______AST END_______/\n");

    System.out.println("\\_______SYMBOL TABLE_______/\n");
    ST.printTable();
    System.out.println("\\_____SYMBOL TABLE END_____/\n");


  }
}

PARSER_END(ccalparse)


/*********************************
**SECTION 3 -- TOKEN DEFINITIONS**
*********************************/

TOKEN_MGR_DECLS :
{
  static int commentNestLvl = 0;
}

/******* skip whitespace, tabs & newlines *******/
SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
}

/******* skip single line comments or change to skipping multi-line comments *******/
SKIP :
{
  < "//" ([" "-"~"])* ("\r"|"\n"|"\r\n") >
  | "/*" { commentNestLvl++; } : IN_COMMENT
}

/******* multi-line comment skipping *******/
<IN_COMMENT> SKIP :
{
  "/*" { commentNestLvl++;}
  | "*/" {commentNestLvl--; if (commentNestLvl==0) SwitchTo(DEFAULT);}
  | <~[]>
}

/******* RESERVED WORDS *******/
TOKEN :
{
  < VAR : "var" >
  | < CONST : "const" >
  | < RETURN : "return" >
  | < INT : "integer" >
  | < BOOL : "boolean" >
  | < VOID : "void" >
  | < MAIN : "main" >
  | < IF : "if" >
  | < ELSE : "else" >
  | < TRUE : "true" >
  | < FALSE : "false" >
  | < WHILE : "while" >
  | < SKIPPY : "skip" >
}

/******** PUNCTUATION *******/
TOKEN :
{
  < COMMA : "," >
  | < SEMIC : ";" >
  | < COLON : ":" >
}

/******** BRACKETS *******/
TOKEN :
{
  < CURLY_O : "{" >
  | < CURLY_C : "}" >
  | < ROUNDED_O : "(" >
  | < ROUNDED_C : ")" >
}

/******* LOGICAL & MATHEMATICAL OPER8TORS *******/
TOKEN :
{
  < ASSIGN : "=" >
  | < PLUS : "+" >
  | < MINUS : "-" >
  | < NEGATE : "~" >
  | < OR : "||" >
  | < AND : "&&" >
  | < EQUAL : "==" >
  | < NOT_EQUAL : "!=" >
  | < LESS_THAN : "<" >
  | < LESS_THAN_EQUAL : "<=" >
  | < GREATER_THAN : ">" >
  | < GREATER_THAN_EQUAL : ">=" >
}

/******* INTS *******/
TOKEN :
{
  < DIGIT : ["0"-"9"] >
  | < NUM : ( "-" ["1"-"9"]) >
}

/******* CHARS & IDs ******/
TOKEN :
{
  <#CHAR: ["a"-"z"]>
  | <ID: <CHAR> ( <CHAR> | <DIGIT> | "_")* >
}


/************************************
**SECTION 4 -- GRAMMAR & PROD RULES**
************************************/

SimpleNode program() #Program: {}
{
  /******* takes in any amount of  declarations, function definitions and a main *******/
  /******* uses kleene star instead of decl_list() & function_list() *******/
  (decl())* (function())* main() <EOF> {return jjtThis;}
}

void main() #Main: {}
{
  /******* takes in a main, braces, declarations and statements *******/
  /******* uses kleene star instead of statement_block() *******/
  <MAIN> <CURLY_O> (decl())* (statement())* <CURLY_C>
}

void decl() : {}
{
  (var_decl() | const_decl()) <SEMIC>
}
void var_decl() #VarDecl: {}
{
  <VAR> idt() <COLON> type()
}
void const_decl() #ConstDecl: {}
{
  <CONST> idt() <COLON> type() <ASSIGN> expr()
}

void type() #Type: {Token t;}
{
  (t=<NUM> | t=<VOID> | t=<BOOL> | t=<INT>) {jjtThis.value = t.image;}
}

void expr() : {}
{
  /******* uses kleene star instead of frag_list() *******/
  frag() (bin_op() frag())*
}


void frag() : {}
{
  /******* uses kleene star instead of arg_lsit() *******/
  (<MINUS>)? idt() (<ROUNDED_O> (arg())* <ROUNDED_C>)?
  | <NUM>
  | <DIGIT>
  | <TRUE>
  | <FALSE>
  | <ROUNDED_O> expr() <ROUNDED_C>
}

void bin_op() : {Token t;}
{
  t=<PLUS> {jjtThis.value = t.image;} #PlusOp
  | t=<MINUS> {jjtThis.value = t.image;} #MinusOp
}

void comp_op() : {Token t;}
{
  t=<EQUAL> {jjtThis.value = t.image;} #EqCompOp
  | t=<NOT_EQUAL> {jjtThis.value = t.image;} #NotEqCompOp
  | t=<GREATER_THAN> {jjtThis.value = t.image;} #GTCompOp
  | t=<GREATER_THAN_EQUAL> {jjtThis.value = t.image;} #GTEqCompOp
  | t=<LESS_THAN> {jjtThis.value = t.image;} #LTCompOp
  | t=<LESS_THAN_EQUAL> {jjtThis.value = t.image;} #LTEqCompOp
}

void function() : {}
{
  /******* uses kleene star instead of param_lsit() *******/
  type() idt() <ROUNDED_O> (param())* <ROUNDED_C>
  <CURLY_O>
  (decl())*
  (statement())*
  <RETURN> <ROUNDED_O> [expr()] <ROUNDED_C> <SEMIC>
  <CURLY_C>
}

void param() : {}
{
  /******* uses lookahead to choose between prod rules to eliminate choice conflict *******/
  LOOKAHEAD(<ID> <COLON> type() <COMMA>)
  <ID> <COLON> type() <COMMA> param()
  | <ID> <COLON> type()
}

void statement() : {}
{
  /******* uses lookahead to choose between prod rules to eliminate choice conflict *******/
  LOOKAHEAD(idt() <ASSIGN>)
  idt() <ASSIGN> expr() <SEMIC>
  | idt() <ROUNDED_O> (arg())* <ROUNDED_C> <SEMIC>
  | <CURLY_O> (statement())* <CURLY_C>
  | <IF> condition() <CURLY_O> (statement())* <CURLY_C> <ELSE> <CURLY_O> (statement())* <CURLY_C>
  | <WHILE> condition() <CURLY_O> (statement())* <CURLY_C>
  | <SKIPPY> <SEMIC>

}

void condition() : {}
{
  condition_prime() ((<OR> | <AND>) condition_prime())*
}

void condition_prime() : {}
{
  LOOKAHEAD(<ROUNDED_O> condition())
  <ROUNDED_O> condition() <ROUNDED_C>
  | <NEGATE> condition()
  | expr() comp_op() expr()
}

void arg() : {}
{
  idt() arg_prime()
}


void arg_prime() : {}
{
  /******* fixes conflict/L recur *******/
  [<COMMA> arg()]
}
void idt() #ID : {Token t;}
{
  t = <ID> {jjtThis.value = t;}
}
