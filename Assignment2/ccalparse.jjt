/***********************
**SECTION 1 -- OPTIONS**
***********************/
options
{
  /******* INGORE_CASE is the only option needed *******/
  IGNORE_CASE = true;
  JAVA_UNICODE_ESCAPE = true;
  NODE_DEFAULT_VOID = true;
  MULTI=true;
  VISITOR = true;
}

/***********************
*SECTION 2 -- USR CODE**
***********************/

PARSER_BEGIN(ccalparse)

import java.io.*;
import java.util.*;

public class ccalparse {
  public static SymTbl ST = new SymTbl(); //initialise the Symbol Table
  public static String scope = "global";  //set scope to global by default

  public static void main(String[] args)throws ParseException, FileNotFoundException {
    ccalparse parse;

    System.out.println("------------------------------------\n");
    System.out.println("Parsing file...\n");

    parse = new ccalparse(new java.io.FileInputStream(args[0]));
    System.out.println("Successfully parsed!");

    SimpleNode root = parse.program();

    System.out.println("\\_________AST_________/\n");
    root.dump("");
    System.out.println("");
    System.out.println("\\_______AST END_______/\n");

    System.out.println("\\_______SYMBOL TABLE_______/\n");
    ST.printST();
    System.out.println("\\_____SYMBOL TABLE END_____/\n");


  }
}

PARSER_END(ccalparse)


/*********************************
**SECTION 3 -- TOKEN DEFINITIONS**
*********************************/

TOKEN_MGR_DECLS :
{
  static int commentNestLvl = 0;
}

/******* skip whitespace, tabs & newlines *******/
SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
}

/******* skip single line comments or change to skipping multi-line comments *******/
SKIP :
{
  < "//" ([" "-"~"])* ("\r"|"\n"|"\r\n") >
  | "/*" { commentNestLvl++; } : IN_COMMENT
}

/******* multi-line comment skipping *******/
<IN_COMMENT> SKIP :
{
  "/*" { commentNestLvl++;}
  | "*/" {commentNestLvl--; if (commentNestLvl==0) SwitchTo(DEFAULT);}
  | <~[]>
}

/******* RESERVED WORDS *******/
TOKEN :
{
  < VAR : "var" >
  | < CONST : "const" >
  | < RETURN : "return" >
  | < INT : "integer" >
  | < BOOL : "boolean" >
  | < VOID : "void" >
  | < MAIN : "main" >
  | < IF : "if" >
  | < ELSE : "else" >
  | < TRUE : "true" >
  | < FALSE : "false" >
  | < WHILE : "while" >
  | < SKIPPY : "skip" >
}

/******** PUNCTUATION *******/
TOKEN :
{
  < COMMA : "," >
  | < SEMIC : ";" >
  | < COLON : ":" >
}

/******** BRACKETS *******/
TOKEN :
{
  < CURLY_O : "{" >
  | < CURLY_C : "}" >
  | < ROUNDED_O : "(" >
  | < ROUNDED_C : ")" >
}

/******* LOGICAL & MATHEMATICAL OPER8TORS *******/
TOKEN :
{
  < ASSIGN : "=" >
  | < PLUS : "+" >
  | < MINUS : "-" >
  | < NEGATE : "~" >
  | < OR : "||" >
  | < AND : "&&" >
  | < EQUAL : "==" >
  | < NOT_EQUAL : "!=" >
  | < LESS_THAN : "<" >
  | < LESS_THAN_EQUAL : "<=" >
  | < GREATER_THAN : ">" >
  | < GREATER_THAN_EQUAL : ">=" >
}

/******* INTS *******/
TOKEN :
{
  < DIGIT : ["0"-"9"] >
  | < NUM : ( "-" ["1"-"9"]) >
}

/******* CHARS & IDs ******/
TOKEN :
{
  <#CHAR: ["a"-"z"]>
  | <ID: <CHAR> ( <CHAR> | <DIGIT> | "_")* >
}


/************************************
**SECTION 4 -- GRAMMAR & PROD RULES**
************************************/

SimpleNode program() #Program: {}
{
  /******* takes in any amount of  declarations, function definitions and a main *******/
  /******* uses kleene star instead of decl_list() & function_list() *******/
  (decl(scope))* (function())* main() <EOF> {return jjtThis;} //added <EOF>
}

void main() #Main: {Token t;}
{
  /******* takes in a main, braces, declarations and statements *******/
  /******* uses kleene star instead of statement_block() *******/
  t=<MAIN> {scope="Main";} <CURLY_O> (decl(scope))* (statement())* <CURLY_C>
}

void decl(String scope) #Decl: {}
  //scope must be passed as a param to all declaration functions so that it can be properly manipulated and tracked.
{
  (var_decl(scope) | const_decl(scope)) <SEMIC>
}
void var_decl(String scope) : {Token t; String id; String type;}
{
  //have to pass id, type, "var"(val) & scope in this order as thats how the insert method is defined in SymTbl class
  t=<VAR> id=idt() <COLON> type=type() {jjtThis.value = t.image; ST.insert(id, type, "var", scope);}#VarDecl(2)
}
void const_decl(String scope) : {Token t; String id; String type;}
{
  //have to pass id, type, "var"(val) & scope in this order as thats how the insert method is defined in SymTbl class
  t=<CONST> id=idt() <COLON> type=type() <ASSIGN> expr() {jjtThis.value = t.image; ST.insert(id, type, "const", scope);}#ConstDecl(2)
}

String type() #Type: {Token t;}
{
  (t=<NUM> | t=<VOID> | t=<BOOL> | t=<INT>) {jjtThis.value = t.image; return t.image;}
}



void expr() : {} {
    frag() exprPR()
    | <ROUNDED_O> expr() <ROUNDED_C> exprPR()
}

void exprPR() : {} {
    bin_op() expr()
    | {}
}

void frag() : {Token t;}
{
  /******* uses kleene star instead of arg_lsit() *******/
  //had to change '(<MINUS>)? idt() (<ROUNDED_O> (arg())* <ROUNDED_C>)?' to current version to be able to check and add minus init to AST

  t=<NUM>         {jjtThis.value = t.image;}#Num
  | t=<DIGIT>       {jjtThis.value = t.image;}#Digit
  | t=<TRUE>        {jjtThis.value = t.image;}#TrueBool
  | t=<FALSE>       {jjtThis.value = t.image;}#FalseBool
  | idt() (<ROUNDED_O> (arg())* <ROUNDED_C> | {}) #FunctionCall
}

void bin_op() : {Token t;}
{
  t=<PLUS>    {jjtThis.value = t.image;} #PlusOp(2)
  | t=<MINUS> {jjtThis.value = t.image;} #MinusOp(2)
}

void comp_op() : {Token t;}
{
  //if there is comparison made, it is added to AST as one of the below
  t=<EQUAL>                 {jjtThis.value = t.image;} #EqCmpOp(2)
  | t=<NOT_EQUAL>           {jjtThis.value = t.image;} #NotEqCmpOp(2)
  | t=<GREATER_THAN>        {jjtThis.value = t.image;} #GTCmpOp(2)
  | t=<GREATER_THAN_EQUAL>  {jjtThis.value = t.image;} #GTEqCmpOp(2)
  | t=<LESS_THAN>           {jjtThis.value = t.image;} #LTCmpOp(2)
  | t=<LESS_THAN_EQUAL>     {jjtThis.value = t.image;} #LTEqCmpOp(2)
}

void function() #Function: {Token t; String type; String id;}
{
  /******* uses kleene star instead of param_lsit() *******/
  //have to pass id, type, "var"(val) & scope in this order as thats how the insert method is defined in SymTbl class
  type=type() id=idt() <ROUNDED_O> (param(scope))* <ROUNDED_C> {scope = id; ST.insert(id, type, "func", scope);}
  <CURLY_O>
  /******* uses kleene star instead of decl_lsit() and statement_list() *******/
  (decl(scope))*
  (statement())*
  rtn() //#Return put here for the AST
  <CURLY_C>
}

void rtn() : {}
{
  <RETURN> <ROUNDED_O> (idt() | <NUM> | <DIGIT> | <FALSE> | <BOOL>)* <ROUNDED_C> <SEMIC>  #Return(1)
}

void param(String scope) : {String type; String id;}
{
  /******* uses lookahead to choose between prod rules to eliminate choice conflict *******/
  LOOKAHEAD(idt() <COLON> type() <COMMA>)
  id=idt() <COLON> type=type() <COMMA> param(scope)   {ST.insert(id, type, "func", scope);}#Param(3)
  | id=idt() <COLON> type=type()                      {ST.insert(id, type, "func", scope);}#Param(2)
}

void statement() : {Token t;}
{
  /******* uses lookahead to choose between prod rules to eliminate choice conflict *******/

  LOOKAHEAD(2) idt() t=<ASSIGN> statementPrime(t) //t is passed to statement prime
  | idt() <ROUNDED_O> (arg())* <ROUNDED_C> <SEMIC>
  | t=<CURLY_O> (statement())* <CURLY_C>                                                            {jjtThis.value = t.image;} #StatementBlock
  | t=<IF> condition() <CURLY_O> (statement())* <CURLY_C> <ELSE> <CURLY_O> (statement())* <CURLY_C> {jjtThis.value = t.image;} #IfElseStatement(3)
  | t=<WHILE> <ROUNDED_O> condition() <ROUNDED_C> <CURLY_O> (statement())* <CURLY_C>                                        {jjtThis.value = t.image;} #WhileStatement(2)
  | t=<SKIPPY> <SEMIC>                                                                              {jjtThis.value = t.image;} #Skip
}

void statementPrime(Token t) : {}
  //statementPrime takes a token t as a parameter
{
  <MINUS> expr() <SEMIC>                    {jjtThis.value = t.image;} #MinusAssignment(2)
  | expr() <SEMIC>                          {jjtThis.value = t.image;} #Assignment(2)
}



void condition() : {}
{
    <NEGATE> condition() conditionPR()
    | <ROUNDED_O> condition() <ROUNDED_C> conditionPR()
    | frag() exprPR() comp_op() expr() conditionPR()

}

void conditionPR() : {} {
    ( <OR> | <AND> )  condition() conditionPR()
    | {}
}

void arg() : {}
{
  idt() arg_prime()
}


void arg_prime() : {}
{
  /******* fixes conflict/L recur *******/
  [<COMMA> arg()]
}
String idt() #ID : {Token t;}
//now used in place of all previous instances of <ID>
{
  t = <ID>  {jjtThis.value = t.image; return t.image;} //returns the ID as a token
}
